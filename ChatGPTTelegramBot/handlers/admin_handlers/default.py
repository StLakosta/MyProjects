# - *- coding: utf- 8 - *-
import os
from loader import dp, bot
from keyboards.admin_keyboard import *
from keyboards.user_keyboard import *
from filters.admin_filter import IsAdmin
from data.sqlite import *
from states.admin_states import *
from config.config_file import *

from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.types.message import ContentType
from aiogram.dispatcher import FSMContext

async def panel_text(data):
    text = f"""
üîß <b><u>–ü–∞–Ω–µ–ª—å:</u></b>

üë• <i>–Æ–∑–µ—Ä–æ–≤:</i> <code>{len(await get_users())}</code>

<b>/getids</b> - –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –∞–π–¥–∏
    """
    # <b>/private_link_see</b> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    # <b>/private_link TEXT</b> - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    return text

@dp.message_handler(IsAdmin(), text = "üîß –ü–∞–Ω–µ–ª—å üîß", state = "*")
async def helpomation(message: types.Message, state: FSMContext):
    await state.finish()
    data = await get_stats()
    await message.answer(text=await panel_text(data), reply_markup= await admin_menu())

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'close_panel')
async def call_close_panel(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(c.from_user.id, c.message.message_id)
    await bot.send_message(chat_id=c.from_user.id, text=f'üëãüèª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n <i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É:</i>', reply_markup= await user_menu(c.from_user.id))

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'backtime')
async def call_links(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    data = await get_stats()
    await bot.edit_message_text(chat_id=c.from_user.id, text=await panel_text(data), message_id=c.message.message_id, reply_markup=await admin_menu())

@dp.message_handler(IsAdmin(), text = "/getids", state = "*")
async def panel_menu(message: types.Message, state: FSMContext):
    a = await message.answer(f"<i>–°–æ–±–∏—Ä–∞—é ...</i>")
    
    users = await get_users()
    with open("data/users.txt", "w") as f:
        pass
    for us in users:
        with open("data/users.txt", "a+") as f:
            f.write(us[0]+'\n')

    await bot.delete_message(a.chat.id, a.message_id)
    await bot.send_document(message.from_user.id, open("data/users.txt", "rb"))
    os.remove('data/users.txt')
    
@dp.message_handler(IsAdmin(), text = "/private_link_see", state = "*")
async def private_link_see(message: types.Message, state: FSMContext):
    text = await get_private_link_text()
    if text != None:
        await message.answer('<b>–¢–µ–∫—Å—Ç:</b>')
        await message.answer(text[0])
    else:
        await message.answer('<b>–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>')


@dp.message_handler(IsAdmin(), lambda message: "/private_link" in message.text, state = "*")
async def private_link(message: types.Message, state: FSMContext):
    text = message.text.replace('/private_link ', '', 1)
    text_link = await get_private_link_text()
    if text_link != None:
        await edit_private_link_text(text, True)
        await message.answer('‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ</b>')
    else:
        await edit_private_link_text(text, False)
        await message.answer('‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ</b>')



################# AD POST #################

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'adpost')
async def call_links(c: types.CallbackQuery):
    await bot.edit_message_text(chat_id=c.from_user.id, text=f'‚ûï<i>–í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</i>', message_id=c.message.message_id, reply_markup=await adpost_add_rem())

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'clear_adposted', state = '*')
async def adlinks_rem(c: types.CallbackQuery, state: FSMContext):
    await clear_adpost()
    await bot.send_message(c.from_user.id, '‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ</b>', reply_markup = await user_menu(c.from_user.id))

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'get_adposted', state = '*')
async def adlinks_rem(c: types.CallbackQuery, state: FSMContext):
    data = await get_adpost()
    if data != None:
        if data[0] != 'None':
            await bot.copy_message(c.from_user.id, data[1], data[2], parse_mode='Markdown', reply_markup=data[0], allow_sending_without_reply=True)
            await bot.send_message(c.from_user.id, f'üëÅ <b>–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω:</b> <code>{data[3]}</code> —Ä–∞–∑(–∞)')
        else:
            await bot.copy_message(c.from_user.id, data[1], data[2], parse_mode='Markdown', allow_sending_without_reply=True)
            await bot.send_message(c.from_user.id, f'üëÅ <b>–ü–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω:</b> <code>{data[3]}</code> —Ä–∞–∑(–∞)')
    else:
        await bot.send_message(c.from_user.id, f'–ü–æ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'add_adposted', state = '*')
async def mailings_forw1(c: types.CallbackQuery, state: FSMContext):
    await add_adpost_st.mes.set()
    await bot.send_message(c.from_user.id, '<i>–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</i>', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(IsAdmin(), state = add_adpost_st.mes, content_types=[ContentType.PHOTO, ContentType.TEXT, ContentType.VOICE, ContentType.VIDEO])
async def mailings_forw1(message: types.Message, state: FSMContext):
    rm = message.reply_markup
    uid = message.from_user.id
    mid = message.message_id
    await state.finish()
    await add_adpost(rm,uid,mid)
    await bot.send_message(message.from_user.id, '‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ</b>', reply_markup = await user_menu(message.from_user.id))


############# –õ–∏–Ω–∫–∏ #############


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'links')
async def call_links(c: types.CallbackQuery):
    await bot.edit_message_text(chat_id=c.from_user.id, text=f'‚ûï <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª—ã!</b> ‚ûï\n<i>–í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</i>', message_id=c.message.message_id, reply_markup=await link_add_rem())

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∫–∏ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'add_linked', state = '*')
async def links_add(c: types.CallbackQuery, state: FSMContext):
    await bot.send_message(c.from_user.id, '<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø:</i>', reply_markup=await type_link())

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'bot_add_linked', state = '*')
async def links_add(c: types.CallbackQuery, state: FSMContext): 
    await add_link_st.link.set()
    await state.update_data(type='bot')
    await bot.send_message(c.from_user.id, '<i>–õ–∏–Ω–∫ –Ω–∞ –±–æ—Ç–∞:</i>', reply_markup=ReplyKeyboardRemove())

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'channel_add_linked', state = '*')
async def links_add(c: types.CallbackQuery, state: FSMContext): 
    await add_link_st.link.set()
    await state.update_data(type='channel')
    await bot.send_message(c.from_user.id, '<i>–õ–∏–Ω–∫ –Ω–∞ –∫–∞–Ω–∞–ª | –Ω–∞–∑–≤–∞–Ω–∏–µ</i>', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(IsAdmin(), state = add_link_st.link)
async def links_add_lnk1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        type = data['type']
        overall = message.text.split(' | ')
        data['link'] = overall[0]
        data['name'] = overall[1]

    if type == 'channel':
        await message.answer('<i>ID –∫–∞–Ω–∞–ª–∞(@userinfobot), –≤–º–µ—Å—Ç–µ —Å  "-":</i>')
        await add_link_st.next()
    else:
        channel_id = 'bot'
        link = overall[0]
        type = 'bot'
        name = overall[1]
        await state.finish()

        await add_link(link, channel_id, type, name)
        await message.answer(f'‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ!</b>\n<i>–°—Å—ã–ª–∫–∞:</i> <code>{link}</code>', reply_markup=await admin_menu())


@dp.message_handler(IsAdmin(), state = add_link_st.channel_id)
async def links_add_lnk2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        channel_id = message.text
        link = data['link']
        type = data['type']
        name = data['name']
    await state.finish()

    await add_link(link, channel_id, type, name)
    await message.answer(f'‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ!</b>\n<i>–ò–º—è –∫–∞–Ω–∞–ª–∞</i>: <code>{name}</code>\n<i>–°—Å—ã–ª–∫–∞:</i> <code>{link}</code>\n<i>ID –∫–∞–Ω–∞–ª–∞</i>: <code>{channel_id}</code>', reply_markup=await admin_menu())

### –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∫–∏ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'rem_linked', state = '*')
async def links_rem(c: types.CallbackQuery, state: FSMContext):
    await rem_link_st.channel_id.set()
    await bot.send_message(c.from_user.id, '<i>–í–≤–µ–¥–∏ <b>–°–°–´–õ–ö–£</b> –∫–∞–Ω–∞–ª–∞/–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:</i>', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(IsAdmin(), state = rem_link_st.channel_id)
async def links_rem_lnk1(message: types.Message, state: FSMContext):
    await state.finish()
    link = message.text

    await remove_link(link)
    await message.answer(f'‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ!</b>\n<i>–°—Å—ã–ª–∫–∞</i>: <code>{link}</code>', reply_markup=await admin_menu())

### –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–Ω–∫–æ–≤ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'get_linked', state = '*')
async def links_add(c: types.CallbackQuery, state: FSMContext):
    channels = await get_links()
    await bot.send_message(c.from_user.id, '<i>–õ–∏–Ω–∫–∏ + ID –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</i>')
    i = 0
    if channels != []:
        for data in channels:
            if data[2] == 'channel':
                if i == 0:
                    txt = '1'
                else:
                    txt = str(i + 1)
                await bot.send_message(c.from_user.id, f'üñ• <b>–õ–∏–Ω–∫–∞ ‚Ññ{txt}</b>\n<i>–ò–º—è –∫–∞–Ω–∞–ª–∞:</i> <code>{data[3]}</code>\n<i>–õ–∏–Ω–∫:</i> <code>{data[0]}</code>\n<i>ID –∫–∞–Ω–∞–ª–∞:</i> <code>{data[1]}</code>')
                i+=1
    await bot.send_message(c.from_user.id, '<i>–õ–∏–Ω–∫–∏ –±–æ—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</i>')
    i = 0
    if channels != []:
        for data in channels:
            if data[2] == 'bot':
                if i == 0:
                    txt = '1'
                else:
                    txt = str(i + 1)
                await bot.send_message(c.from_user.id, f'ü§ñ <b>–õ–∏–Ω–∫–∞ ‚Ññ{txt}</b>\n<i>–õ–∏–Ω–∫:</i> <code>{data[0]}</code>')
                i+=1
    else:
        await bot.send_message(c.from_user.id, f'‚úñÔ∏è <b>–õ–∏–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b> ‚úñÔ∏è', reply_markup = await user_menu(c.from_user.id))


############# –†–µ–∫–ª–∞–º–Ω—ã–µ –ª–∏–Ω–∫–∏ #############


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'adlinks')
async def call_adlinks(c: types.CallbackQuery):
    await bot.edit_message_text(chat_id=c.from_user.id, text=f'‚ûï <b>–†–µ–∫–ª–∞–º–Ω—ã–µ –ª–∏–Ω–∫–∏:</b>\n<i>–í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</i>', message_id=c.message.message_id, reply_markup=await adlink_add_rem())

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –ª–∏–Ω–∫–∏ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'add_adlinked', state = '*')
async def adlinks_add(c: types.CallbackQuery, state: FSMContext):
    await add_adlink_st.name.set()
    await bot.send_message(c.from_user.id, '‚ûï <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n<i>–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</i>')

@dp.message_handler(IsAdmin(), state = add_adlink_st.name)
async def links_add_lnk2(message: types.Message, state: FSMContext):
    await state.finish()
    name = message.text
    code = 'ad-'+await random_word(10)
    link = f'https://t.me/{bot_user}?start='+code
    await add_adlink(name, code)
    await message.answer(f'‚úîÔ∏è <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b> <code>{link}</code>', reply_markup = await user_menu(message.from_user.id))

### –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ª–∏–Ω–æ–∫ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'clear_adlinked', state = '*')
async def adlinks_rem(c: types.CallbackQuery, state: FSMContext):
    await clear_adlinks()
    await bot.send_message(c.from_user.id, '‚úîÔ∏è <b>–£—Å–ø–µ—à–Ω–æ</b>', reply_markup = await user_menu(c.from_user.id))

### –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'get_adlinked', state = '*')
async def adlinks_get(c: types.CallbackQuery, state: FSMContext):
    adlinks = await get_adlinks()
    await bot.send_message(c.from_user.id, '<b>–ò–º—è –∫–∞–Ω–∞–ª–∞ | –ª–∏–Ω–∫ | –∫–æ–ª-–≤–æ –≤—Å—Ç—É–ø–∏–≤—à–∏—Ö</b>')
        
    text = ''
    for link in adlinks:
        text += f'<code>{link[0]}</code> | <code>t.me/{bot_user}?start={link[1]}</code> | <code>{link[2]}</code>\n'

    if text == '':
        text = '‚úñÔ∏è <b>–í –±–æ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ª–∏–Ω–∫–∏</b> ‚úñÔ∏è'

    await bot.send_message(c.from_user.id, text, reply_markup = await user_menu(c.from_user.id))



############# –†–∞—Å—Å—ã–ª–∫–∞ #############


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'mailing')
async def callback_rassilka(c: types.CallbackQuery):
    await bot.edit_message_text(chat_id=c.from_user.id, text='<i>–í—ã–±–µ—Ä–∏ —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å:</i>', message_id=c.message.message_id, reply_markup=await mailing_pic_not())

### –¢–µ–∫—Å—Ç–æ–≤–∞—è ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'mailing_text', state = '*')
async def mailings_text(c: types.CallbackQuery, state: FSMContext):
    await mailing_st.keyb.set()
    await bot.send_message(c.from_user.id, '<b>–ù–∞–ø–∏—à–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≤–∏–¥–µ, –º–æ–∂–Ω–æ –º–Ω–æ–≥–æ, –∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:</b>\n\ntext | link\n\n<i><u>–ï—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –ø–∏—à–∏:</u></i> <code>0</code>', reply_markup=InlineKeyboardMarkup())

@dp.message_handler(IsAdmin(), state = mailing_st.keyb)
async def mailings_text1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        keyb = message.text
        if keyb == '0':
            keyb = types.InlineKeyboardMarkup(1)
        else:
            a = keyb.split('\n')
            keyb = types.InlineKeyboardMarkup(1)
            for but in a:
                b = but.split(' | ')
                print(b)
                keyb.add(InlineKeyboardButton(str(b[0]).strip(), url=str(b[1]).strip()))
        data['keyb'] = str(keyb)

        await message.answer('<i>–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</i>', reply_markup=InlineKeyboardMarkup(row_width=1,
                                                                                               inline_keyboard=[
                                                                                                   [
                                                                                                       InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                                                                                   ]
                                                                                               ]))
        await mailing_st.next()

@dp.message_handler(IsAdmin(), state = mailing_st.text)
async def mailings_text1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        keyb = data['keyb']
        await state.finish()
        text = message.text
        users = await get_users()
        nice = 0
        nothing = 0
        for user in users:
            try:
                await bot.send_message(user[0], text, reply_markup=keyb, disable_web_page_preview=True)
                nice += 1
            except:
                nothing += 1
                pass

        await message.answer(f'üí≤ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b> üí≤\n<i>–î–æ—à–ª–æ:</i> {str(nice)}\n<i>–ù–µ –¥–æ—à–ª–æ:</i> {str(nothing)}', reply_markup = await user_menu(message.from_user.id))

### –¢–µ–∫—Å—Ç–æ–≤–∞—è + –ü–∏–∫—á–∞ ###

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == 'mailing_pic', state = '*')
async def mailings_text(c: types.CallbackQuery, state: FSMContext):
    await mailing_st_pic.source_pic.set()
    await bot.send_message(c.from_user.id, '<i>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ:</i>', reply_markup=InlineKeyboardMarkup(row_width=1,
                                                                                               inline_keyboard=[
                                                                                                   [
                                                                                                       InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                                                                                   ]
                                                                                               ]))

@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO, state = mailing_st_pic.source_pic)
async def mailings_text1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        a = await message.answer('<i>–°–∫–∞—á–∏–≤–∞—é...</i>')
        src_rand = 'ads_pic.jpg'
        await message.photo[-1].download(src_rand)
        data['source_pic'] = src_rand
        await bot.delete_message(message.from_user.id, message.message_id)
        await bot.delete_message(a.chat.id, a.message_id)
        await message.answer(f"<b>–ù–∞–ø–∏—à–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≤–∏–¥–µ, –º–æ–∂–Ω–æ –º–Ω–æ–≥–æ, –∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:</b>\n\ntext | link\n\n<i><u>–ï—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –ø–∏—à–∏:</u></i> <code>0</code>")
    await mailing_st_pic.next()

@dp.message_handler(IsAdmin(), state = mailing_st_pic.keyb)
async def mailings_text2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        keyb = message.text
        if keyb == '0':
            keyb = types.InlineKeyboardMarkup(1)
        else:
            a = keyb.split('\n')
            keyb = types.InlineKeyboardMarkup(1)
            for but in a:
                b = but.split(' | ')
                keyb.add(InlineKeyboardButton(str(b[0]).strip(), url=str(b[1]).strip()))
        data['keyb'] = str(keyb)

        await message.answer('<i>–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</i>', reply_markup=InlineKeyboardMarkup(row_width=1,
                                                                                               inline_keyboard=[
                                                                                                   [
                                                                                                       InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                                                                                   ]
                                                                                               ]))
        await mailing_st_pic.next()

@dp.message_handler(IsAdmin(), state = mailing_st_pic.text)
async def mailings_text1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        source_pic = data['source_pic']
        keyb = data['keyb']
        text = message.text
    await state.finish()
        
    users = await get_users()
    nice = 0
    nothing = 0
    for user in users:
        try:
            await bot.send_photo(user[0], photo=open(source_pic, 'rb'), caption=text, reply_markup=keyb)
            nice += 1
        except:
            nothing += 1
            pass
    os.remove(source_pic)
    await message.answer(f'üí≤ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b> üí≤\n<i>–î–æ—à–ª–æ:</i> {str(nice)}\n<i>–ù–µ –¥–æ—à–ª–æ:</i> {str(nothing)}', reply_markup = await user_menu(message.from_user.id))



@dp.callback_query_handler(IsAdmin(), state=[mailing_st.text, mailing_st_pic.source_pic, mailing_st_pic.text, mailing_st_pic.keyb])
async def mailings_quit(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=await admin_menu())