# - *- coding: utf- 8 - *-
import asyncio

from loader import dp, bot
from keyboards.user_keyboard import *
from data.sqlite import *
from states.user_states import Chat
from config.config_file import *

from functions.check_subscribe import subscribed
from misc import rate_limit
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram import types
import openai
from keyboards.admin_keyboard import admin_menu
openai.api_key = "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"
model_engine = 'text-davinci-003'

@rate_limit(limit=2)
@dp.message_handler(commands=['start'], state="*")
async def start(message: types.message, state: FSMContext):
    me = await bot.get_me()
    await state.finish()
    user = await get_user(message.from_user.id)
    if user is None:
        if ' ad-' in message.text:
            codes = await get_codes_adlinks()
            code = message.text.replace('/start ', '').strip()
            if (code, ) in codes:
                await add_count_adlink(code)
                count = await get_count_adlink(code)
                ln = await user_link(message.from_user.id, '–Æ–∑–µ—Ä')
                await bot.send_message(global_admins[0], f'<b>{ln} –≤—Å—Ç—É–ø–∏–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ —Å –∫–æ–¥–æ–º:</b> <code>{code}</code>\n<i>–í—Å–µ–≥–æ –≤—Å—Ç—É–ø–∏–≤—à–∏—Ö:</i> <code>{count[0]}</code>')
        await register_user(message.from_user.id)
        if await subscribed(message.from_user.id):
            await message.answer(text='<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT!üëãüèª</b> \n üëáüèª –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ! üëáüèª ', reply_markup=await user_menu(message.from_user.id))
        else:
            await message.answer(await dont_sub_message(), reply_markup=await sub())
    else:
        if await subscribed(message.from_user.id):
            await message.answer(text='<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT!üëãüèª</b> \n üëáüèª –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ! üëáüèª ', reply_markup=await user_menu(message.from_user.id))
        else:
            await message.answer(await dont_sub_message(), reply_markup=await sub())


@dp.callback_query_handler(lambda c: c.data == 'check_sub', state = '*')
async def check_sub_handler(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if await subscribed(c.from_user.id):
        await bot.delete_message(c.from_user.id, c.message.message_id)
        text = '''
        üëãüèª <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>

<i><b>–°–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b></i>


1. –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ —Ç–æ—á–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

2. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ —è—Å–Ω—ã: –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –±–æ—Ç –≤—ã–¥–∞–ª —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.

3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é: —Ç–∞–∫ –±–æ—Ç—É –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.

4. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–µ—á–∏: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –±–æ—Ç—É –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–Ω–µ—Å—Ç–∏.

5. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ª—É—á—à–µ –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –±–æ—Ç –¥–∞–ª —á–µ—Ç–∫–∏–π –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

6. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ.

7. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã: –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏ –µ–º—É –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ 2 –º–∏–Ω—É—Ç.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
–ö–∞–∫ –≤—ã—á–∏—Å–ª—è—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞–ª?
–î–æ–∫–ª–∞–¥ –Ω–∞ —Ç–µ–º—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á–∞ –ü—É—à–∫–∏–Ω–∞.
–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –±–ª–∏–Ω–æ–≤.


–°–∫–æ—Ä–µ–µ –ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üëáüèª
 <b></b>
'''
        await bot.send_message(c.from_user.id, text=text, reply_markup=await user_menu(c.from_user.id))
    else:
        await bot.send_message(c.from_user.id, await dont_sub_message(), reply_markup=await sub())

async def text(txt: str):
    return txt

@rate_limit(limit=2)
@dp.message_handler()
async def Respond(message: types.Message):
    if await subscribed(message.from_user.id):
        answer = await bot.send_message(chat_id=message.from_user.id,
                                        text='‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ‚è≥ ')
        await text(answer)
        await asyncio.sleep(1)
        completion = openai.Completion.create(
            engine='text-davinci-003',
            prompt=message.text,
            max_tokens=1024,
            temperature=0.5,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0)
        await bot.delete_message(chat_id=message.from_user.id, message_id=answer.message_id)
        await message.answer(completion.choices[0].text)
    else:
        await message.answer(await dont_sub_message(), reply_markup=await sub())

